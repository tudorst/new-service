;; Template version: 1.0.0
{:deps {;; For parsing JSON reports from tools like Trivy
        cheshire/cheshire {:mvn/version "5.11.0"}}

 :tasks
 {:requires ([babashka.process :refer [shell]]
             [cheshire.core :as json]
             [clojure.string :as str])
  
  ;; ---
  ;; UTILITY TASKS
  ;; ---
  clean
  {:doc "Clean up generated files and artifacts."
   :task (do (println "üßπ Cleaning up generated files...")
             (shell "rm -f pom.xml trivy-report.json")
             (println "‚úÖ Cleanup complete."))}

  ;; ---
  ;; SETUP & INSTALLATION
  ;; ---
  init
  {:doc "Install all project dependencies (NPM and Clojure)."
   :task (do (println "üîß Initializing project and installing dependencies...")
             (shell "npm install")
             (shell "clojure -P") ; Prepares/downloads Clojure deps
             (println "‚úÖ Dependencies installed."))}

  ;; ---
  ;; LINTING TASKS
  ;; ---
  lint:clj
  {:doc "Lint Clojure source code with clj-kondo."
   :task (shell "clj-kondo --lint src test")}

  lint:js
  {:doc "Lint JavaScript source code."
   :task (shell "npm run lint")}

  lint
  {:doc "Run all linters."
   :depends [lint:clj lint:js]}

  ;; ---
  ;; TESTING TASKS
  ;; ---
  test:clj
  {:doc "Run Clojure tests with Kaocha."
   :task (shell "clojure -M:kaocha")}

  test:js
  {:doc "Run JavaScript tests."
   :task (shell "npm test")}

  test
  {:doc "Run all Clojure and JavaScript tests."
   :depends [test:clj test:js]}

  coverage
  {:doc "Generate Clojure test coverage report with Cloverage."
   :task (shell "clojure -M:cloverage")}

  ;; ---
  ;; AUDITING & SECURITY TASKS
  ;; ---
  audit:clj
  {:doc "Check for outdated Clojure dependencies with antq."
   :task (shell "clojure -M:antq")}

  audit:js
  {:doc "Audit NPM dependencies for vulnerabilities (non-blocking)."
   :task (try (shell "npm audit --audit-level=moderate")
              (catch Exception _
                (println "‚ö†Ô∏è npm audit found issues, but continuing (non-blocking).")))}

  generate-pom
  {:doc "Generate pom.xml from deps.edn for vulnerability scanning."
   :task (shell "clojure -Spom")}

  trivy-scan
  {:doc "Run Trivy to scan for vulns and licenses, generating a report."
   :depends [generate-pom]
   ;; We remove --exit-code so this task always passes and generates a report.
   ;; The check task below is responsible for failing the build.
   :task (shell "trivy fs --scanners vuln,license --format json -o trivy-report.json --severity HIGH,CRITICAL .")}

  trivy-check
  {:doc "Parse Trivy report for vulnerabilities and license issues, then fail if needed."
   :depends [trivy-scan]
   :task
   (let [report (-> "trivy-report.json" slurp (json/parse-string true))
         results (get-in report [:Results] [])
         disallowed-licenses #{"GPL" "AGPL" "LGPL"}

         ;; Find all high/critical vulnerabilities across all results
         vuln-issues (->> results
                          (mapcat :Vulnerabilities)
                          (filter (fn [x] (some? x))) ; Filter out nil entries
                          (filter (fn [x] (contains? #{"HIGH" "CRITICAL"} (:Severity x)))))

         ;; Find all packages with disallowed licenses
         license-issues (->> results
                             (mapcat :Packages)
                             (filter (fn [x] (some? x))) ; Filter out nil entries
                             (filter (fn [pkg] (some disallowed-licenses (:Licenses pkg)))))]

     (if (and (empty? vuln-issues) (empty? license-issues))
       (println "‚úÖ Trivy scan passed: No critical vulnerabilities or disallowed licenses found.")
       (do
         (println "---")
         (when (not-empty vuln-issues)
           (println "‚ùå Found HIGH/CRITICAL vulnerabilities:")
           (doseq [{:keys [PkgName VulnerabilityID Severity]} vuln-issues]
             (println (format "  - %s: [%s] %s" PkgName Severity VulnerabilityID))))

         (when (not-empty license-issues)
           (println "\n‚ùå Found packages with disallowed licenses:")
           (doseq [{:keys [Name Licenses]} license-issues]
             (println (format "  - %s (License: %s)" Name (str/join ", " Licenses)))))

         (println "\n F ailing build due to security/license issues.")
         (System/exit 1))))}

  ;; ---
  ;; BUILD & CI TASKS
  ;; ---
  check
  {:doc "Run all checks: lint, test, and audit."
   :depends [lint test audit:clj audit:js trivy-check]}

  docker-build
  {:doc "Build the Docker image for the service."
   :task (shell (str "docker build -t {{SERVICE_NAME}}:local ."))}

  ci
  {:doc "Run the full CI pipeline: install, check, generate coverage, and build."
   :depends [init check coverage docker-build]}}}